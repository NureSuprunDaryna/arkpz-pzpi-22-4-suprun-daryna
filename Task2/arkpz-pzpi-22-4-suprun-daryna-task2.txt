Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії








Лабораторна робота
з дисципліни: “Аналіз та рефакторинг коду”
на тему:  «Розробка бази даних для серверної частини програмної системи та прикладного програмного інтерфейсу (API)»










Виконала:
 ст. гр ПЗПІ-22-4
Супрун Дарина Андріївна


10 грудня 2024 р.


Перевірив: 
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович








Харків 2024
1 МЕТА


Навчити студентів розробки бази даних для серверної частини  програмної системи та прикладного програмного інтерфейсу. 


2 ЗАВДАННЯ


Для виконання лабораторної роботи необхідно виконати наступні завдання:
1. Розробити будову програмної системи.
2. Створити UML діаграму прецедентів для серверної частини системи.
3. Створити ER діаграму даних.
4. Розробити базу даних (БД) програмної системи.
5. Створити діаграму структури БД.
6. Розробити функції роботи з БД (ORM або CoRM тощо).
7. Розробити API (REST або GraphQL, gRPC тощо) для взаємодії серверної частини з клієнтами.
8. Створити специфікацію розробленого API.
9. Створити програмну реалізацію розробленого API та функцій роботи з БД.
10. Перевірити роботу створеного програмного коду серверної частини системи.




________________


3 ХІД РОБОТИ


В ході лабораторної роботи було побудовано UML діаграму прецедентів для серверної частини системи (див. Додаток А). 
Наступним кроком була побудована ER-діаграма даних (див. Додаток Б).
Крок із розробкою бази даних програмної системи було налаштовано через програмний код. Діаграму бази даних системи було побудовано на основі ER-діаграми даних (див. Додаток В).
Наступним кроком стала розробка функцій роботи з базою даних (використано ORM Entity Framework). 
Далі було розроблено API  для взаємодії серверної частини з клієнтами (REST, за допомогою ASP.NET Core Web API).
Наступним кроком було створення специфікації побудованого API (сформовано за допомогою Swagger у вигляді OpenAPI специфікації в форматі YAML, див. Додаток Г).
Під час виконання лабораторної роботи було прийнято низку інженерних рішень, спрямованих на створення багаторівневої архітектури серверу та оптимізацію взаємодії з даними. Основою системи стала багатошарова структура, яка складається з кількох ключових рівнів.
На першому рівні розміщено Core – це базовий шар, який містить основні моделі та допоміжні структури, необхідні для функціонування системи. Наступним є рівень доступу до даних – DAL (Data Access Level), що відповідає за взаємодію з базою даних та файловою системою серверу. Він містить класи, які забезпечують зчитування, збереження та оновлення даних.
Ключову роль у системі відіграє шар бізнес-логіки під назвою Server, який реалізує основні процеси обробки запитів. Саме тут розміщено контролери, що приймають запити від веб- та мобільних додатків, обробляють їх та формують відповіді. На етапі розробки також передбачено створення веб- та мобільних додатків як окремого рівня взаємодії з користувачем, які будуть реалізовані у майбутньому.
Для зберігання основної інформації використовується SQL Server як система управління базами даних. Взаємодія з базою даних здійснюється за допомогою Entity Framework, що спрощує роботу з даними завдяки використанню ORM-технології.
Серверна частина розроблена на основі ASP.NET Core Web API, що забезпечує стабільність і масштабованість системи, а також підтримує сучасні принципи розробки веб-сервісів.


________________


ВИСНОВКИ
У процесі виконання лабораторної роботи було розроблено комплекс проєктної документації та реалізовано ключові компоненти системи. Зокрема, створено UML-діаграми прецедентів, які відображають основні сценарії використання системи, а також ER-діаграму бази даних, що описує логічну структуру даних.
        Було спроєктовано та реалізовано базу даних разом із відповідною діаграмою її структури, а також розроблено функції для взаємодії з базою даних. Крім цього, створено API, яке забезпечує зв’язок серверної частини з клієнтськими додатками, та підготовлено специфікацію цього API для детального опису його можливостей і способів використання.
        Для розробки серверної частини було обрано ASP.NET Core Web API, що забезпечує сучасний підхід до створення веб-сервісів. Як система управління базами даних використовувався SQL Server, а для спрощення роботи з базою даних застосовувався ORM Entity Framework.
Посилання на відео: https://youtu.be/mhiEtDA5tP4