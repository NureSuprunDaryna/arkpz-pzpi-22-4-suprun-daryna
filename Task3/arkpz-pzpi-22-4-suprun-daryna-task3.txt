Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії








Лабораторна робота
з дисципліни: “Аналіз та рефакторинг коду”
на тему:  «Розробка бізнес-логіки та функцій адміністрування серверної частини програмної системи»










Виконала:
 ст. гр ПЗПІ-22-4
Супрун Дарина Андріївна


1 січня 2024 р.


Перевірив: 
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович








Харків 2024
1 МЕТА


Навчити студентів розробляти розробити бізнес-логику та функції адміністрування серверної частини  програмної системи. 


2 ЗАВДАННЯ


Для виконання лабораторної роботи необхідно виконати наступні завдання:
1. Розробити бізнес логіку серверної частини програмної системи.
2. Розробити функції адміністрування серверної частини програмної системи.
3. Створити програмну реалізацію бізнес логіки та функцій адміністрування серверної частини.
4. Перевірити роботу серверної частини системи.
5. Завантажити або оновити (при потребі) створений програмний код у GitHub репозиторій для лабораторних робіт у гілку репозиторію main.




________________


3 ХІД РОБОТИ


В ході лабораторної роботи було побудовано UML діаграму діяльності для серверної частини системи (див. Додаток А). 
Наступним кроком була побудована UML діаграма взаємодії для серверної частини системи (див. Додаток Б).
Крок із розробкою бази даних програмної системи було налаштовано через програмний код. Діаграму бази даних системи було побудовано на основі ER-діаграми даних (див. Додаток В).
Розробка бізнес-логіки серверної частини програмної системи для створення ароматів та управління користувачами. Реалізація включала: управління сесіями користувачів за допомогою змінних сесій для забезпечення персоналізованого доступу; перевірка ролей із обмеженням доступних дій на основі привілеїв, що відповідають кожній ролі (користувач, адміністратор, адміністратор бази даних); безпечне зберігання паролів, що забезпечується за рахунок їх хешування перед внесенням у базу даних; генерація ароматів на основі уподобань користувача з використанням алгоритмів для розподілу нот та категорій; інтеграція з Gmail API для відправки повідомлень, таких як підтвердження реєстрації; автоматизація формування системних сповіщень, що інформують про успішні чи невдалі операції;
Реалізація адміністративних функцій серверної частини системи. Завдання включало: резервне копіювання бази даних для забезпечення безпеки та можливості відновлення інформації; відновлення даних з резервних копій для відновлення цілісності у разі пошкодження чи втрати основної бази; модерація контенту, що дозволяє адміністратору перевіряти створені користувачами аромати та проводити необхідні дії (редагування чи видалення); управління користувачами, включаючи блокування облікових записів, оновлення ролей користувачів та видалення облікових записів за запитом.


________________


ВИСНОВКИ
У процесі виконання лабораторної роботи було розроблено кУсі поставлені завдання були виконані відповідно до вимог, що дозволило набути навичок, необхідних для розробки та підтримки серверної частини складних програмних систем. Було розроблено UML-діаграми діяльності, взаємодії та бази даних, які дозволили створити чітке уявлення про роботу системи, її структуру та взаємозв’язки між компонентами. Реалізовано бізнес-логіку серверної частини, яка включала управління сесіями користувачів, перевірку ролей, безпечне зберігання паролів, генерацію ароматів, інтеграцію з зовнішніми сервісами (Gmail API) та автоматичне формування системних сповіщень. Впроваджено функції адміністрування, які забезпечують резервне копіювання та відновлення бази даних, модерацію контенту та управління обліковими записами користувачів. Проведено тестування функціоналу серверної частини, що підтвердило її стабільність та відповідність поставленим вимогам.
Посилання на відео: https://youtu.be/ntQSxRsDZbM
________________












6 ДОДАТОК В
ПРИКЛАДИ ПРОГРАМНОГО КОДУ
using BLL.Interfaces;
using Core.Models;
using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;


namespace BLL.Services
{
    public class BackupService : IBackupService
    {
        private readonly string _backupDirectory;
        private readonly string _connectionString;
        private readonly ILogger<BackupService> _logger;


        public BackupService(string connectionString, ILogger<BackupService> logger, IConfiguration configuration)
        {
            _connectionString = connectionString;
            _logger = logger;
            _backupDirectory = configuration["BackupSettings:Directory"];
        }


        public async Task<Result> CreateBackupAsync()
        {
            try
            {
                if (!Directory.Exists(_backupDirectory))
                {
                    Directory.CreateDirectory(_backupDirectory);
                }


                var backupFilePath = Path.Combine(_backupDirectory, $"ElixirNocturne_{DateTime.Now:yyyyMMddHHmmss}.bak");
                var backupQuery = $"BACKUP DATABASE [ElixirNocturne] TO DISK = '{backupFilePath}'";


                using var connection = new SqlConnection(_connectionString);
                using var command = new SqlCommand(backupQuery, connection);


                await connection.OpenAsync();
                await command.ExecuteNonQueryAsync();


                _logger.LogInformation("Database backup created successfully at {DestinationPath}.", backupFilePath);
                return new Result(true);
            }
            catch (Exception ex)
            {
                _logger.LogError("Failed to create database backup. Error: {ErrorMessage}", ex.Message);
                return new Result(false);
            }
        }


}


using BLL.Interfaces;
using Core.Helpers;
using Core.Models;
using DAL.Repositories;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Logging;


namespace BLL.Services
{
    public class ElixirService : GenericService<Elixir>, IElixirService
    {
        private readonly ILogger<ElixirService> _logger;
        private readonly IRepository<Elixir> _elixirRepository;
        private readonly IRepository<Note> _noteRepository;
        private readonly UserManager<AppUser> _userManager;
        private readonly IHttpContextAccessor _httpContextAccessor;


        public ElixirService(UnitOfWork unitOfWork,
                             ILogger<ElixirService> logger,
                             UserManager<AppUser> userManager,
                             IHttpContextAccessor httpContextAccessor)
            : base(unitOfWork, unitOfWork.ElixirRepository)
        {
            _logger = logger;
            _userManager = userManager;
            _httpContextAccessor = httpContextAccessor;
            _elixirRepository = unitOfWork.ElixirRepository;
            _noteRepository = unitOfWork.NoteRepository;
        }


        public async Task<Result<Elixir>> CreateElixir(Elixir elixir)
        {
            _logger.LogInformation("Creating a new elixir.");


            if (elixir == null)
            {
                _logger.LogError("Failed to create elixir - input is null.");
                return new Result<Elixir>(false);
            }


            try
            {
                elixir.CreationDate = DateTime.UtcNow;


                var preferences = await _unitOfWork.PreferencesRepository
                    .GetAsync(p => p.UserId == elixir.AuthorId);


                if (preferences == null || !preferences.Any())
                {
                    _logger.LogError("Failed to create elixir - Preferences not found for user ID {AuthorId}.", elixir.AuthorId);
                    return new Result<Elixir>(false);
                }


                var availableNotes = await _noteRepository.GetAsync();


                var compositions = SelectNotesForElixir(preferences.First(), availableNotes.ToList());


                await _elixirRepository.AddAsync(elixir);
                await _unitOfWork.Save();


                var updateResult = await UpdateElixirComposition(elixir.Id, compositions);
                if (!updateResult.IsSuccessful)
                {
                    _logger.LogError("Failed to update composition for elixir ID {ElixirId}.", elixir.Id);
                    return new Result<Elixir>(false);
                }


                _logger.LogInformation("Elixir created successfully with ID {Id}", elixir.Id);
                return new Result<Elixir>(true, elixir);
            }
            catch (Exception ex)
            {
                _logger.LogError("Failed to create elixir! Error: {errorMessage}, Inner Exception: {innerException}", ex.Message, ex.InnerException?.Message);
                return new Result<Elixir>(false);
            }
        }


        public async Task<Result<List<Elixir>>> GetElixirs()
        {
            _logger.LogInformation("Fetching all elixirs.");


            try
            {
                var elixirs = await _elixirRepository.GetAsync();
                return new Result<List<Elixir>>(true, elixirs.ToList());
            }
            catch (Exception ex)
            {
                _logger.LogError("Failed to fetch elixirs. Error: {ErrorMessage}", ex.Message);
                return new Result<List<Elixir>>(false);
            }
        }
        public async Task<Result> UpdateElixir(Elixir elixir)
        {
            _logger.LogInformation("Editing elixir with ID {Id}", elixir.Id);


            if (elixir == null || elixir.Id <= 0)
            {
                _logger.LogError("Failed to edit elixir - input is null or invalid ID.");
                return new Result(false);
            }


            try
            {
                var existingElixir = await _elixirRepository.GetByIdAsync(elixir.Id);
                if (existingElixir == null)
                {
                    _logger.LogWarning("Elixir with ID {Id} not found.", elixir.Id);
                    return new Result(false);
                }


                existingElixir.MapFrom(elixir);


                await _elixirRepository.UpdateAsync(existingElixir);
                await _unitOfWork.Save();


                _logger.LogInformation("Elixir with ID {Id} updated successfully.", elixir.Id);
                return new Result(true);
            }
            catch (Exception ex)
            {
                _logger.LogError("Failed to edit elixir with ID {Id}. Error: {errorMessage}", elixir.Id, ex.Message);
                return new Result(false);
            }
        }


        public async Task<Result> DeleteElixir(int elixirId)
        {
            _logger.LogInformation("Deleting elixir with ID {Id}", elixirId);


            if (elixirId <= 0)
            {
                _logger.LogError("Failed to delete elixir - invalid ID provided.");
                return new Result(false);
            }


            try
            {
                var elixir = await _elixirRepository.GetByIdAsync(elixirId);
                if (elixir == null)
                {
                    _logger.LogWarning("Elixir with ID {Id} not found.", elixirId);
                    return new Result(false);
                }


                await _elixirRepository.DeleteAsync(elixir);
                await _unitOfWork.Save();


                _logger.LogInformation("Elixir with ID {Id} deleted successfully.", elixirId);
                return new Result(true);
            }
            catch (Exception ex)
            {
                _logger.LogError("Failed to delete elixir with ID {Id}. Error: {errorMessage}", elixirId, ex.Message);
                return new Result(false);
            }
        }


        public async Task<Result> SaveFavoriteElixir(int elixirId)
        {
            _logger.LogInformation("Saving elixir with ID {Id} to favorites.", elixirId);


            if (elixirId <= 0)
            {
                _logger.LogError("Failed to save elixir to favorites - invalid elixir ID.");
                return new Result(false);
            }


            try
            {
                var userId = _httpContextAccessor.HttpContext?.Session.GetString("UserId");
                if (string.IsNullOrEmpty(userId))
                {
                    _logger.LogError("Failed to save elixir to favorites - user is not authenticated.");
                    return new Result(false);
                }


                var user = await _userManager.FindByIdAsync(userId);
                if (user == null)
                {
                    _logger.LogError("User with ID {UserId} not found.", userId);
                    return new Result(false);
                }


                var elixir = await _elixirRepository.GetByIdAsync(elixirId);
                if (elixir == null)
                {
                    _logger.LogWarning("Elixir with ID {Id} not found.", elixirId);
                    return new Result(false);
                }


                if (elixir.IsFavorite)
                {
                    _logger.LogWarning("Elixir with ID {Id} is already in the favorites for user {UserId}.", elixirId, userId);
                    return new Result(false);
                }


                elixir.IsFavorite = true;
                user.Elixirs.Add(elixir);


                await _unitOfWork.Save();


                _logger.LogInformation("Elixir with ID {Id} added to favorites for user {UserId}.", elixirId, userId);
                return new Result(true);
            }
            catch (Exception ex)
            {
                _logger.LogError("Failed to save elixir with ID {Id} to favorites. Error: {errorMessage}", elixirId, ex.Message);
                return new Result(false);
            }
        }


        public async Task<Result<List<Elixir>>> GetElixirsByAuthor(string authorId)
        {
            var elixirs = await _elixirRepository.GetAsync(e => e.AuthorId == authorId);
            return new Result<List<Elixir>>(true, elixirs.ToList());
        }


        public async Task<Result> UpdateElixirComposition(int elixirId, List<(int noteId, string noteCategory, decimal proportion)> updatedNotes)
        {
            _logger.LogInformation("Updating composition for elixir with ID {ElixirId}.", elixirId);


            try
            {
                var elixir = await _elixirRepository.GetByIdAsync(elixirId);
                if (elixir == null)
                {
                    _logger.LogError("Elixir with ID {ElixirId} not found.", elixirId);
                    return new Result(false);
                }


                foreach (var note in updatedNotes)
                {
                    var existingNote = elixir.ElixirComposition.FirstOrDefault(ec => ec.NoteId == note.noteId);
                    if (existingNote != null)
                    {
                        existingNote.NoteCategory = note.noteCategory;
                        existingNote.Proportion = note.proportion;
                    }
                    else
                    {
                        elixir.ElixirComposition.Add(new ElixirComposition
                        {
                            ElixirId = elixirId,
                            NoteId = note.noteId,
                            NoteCategory = note.noteCategory,
                            Proportion = note.proportion
                        });
                    }
                }


                await _unitOfWork.Save();
                _logger.LogInformation("Successfully updated composition for elixir with ID {ElixirId}.", elixirId);
                return new Result(true);
            }
            catch (Exception ex)
            {
                _logger.LogError("Failed to update composition for elixir with ID {ElixirId}. Error: {ErrorMessage}", elixirId, ex.Message);
                return new Result(false);
            }
        }


        public async Task<Result<List<Note>>> GetElixirComposition(int elixirId)
        {
            _logger.LogInformation("Retrieving composition for elixir with ID {ElixirId}.", elixirId);


            try
            {
                var elixir = await _elixirRepository.GetByIdAsync(elixirId);
                if (elixir == null)
                {
                    _logger.LogError("Elixir with ID {ElixirId} not found.", elixirId);
                    return new Result<List<Note>>(false);
                }


                var notes = elixir.ElixirComposition
                    .Select(ec => ec.Note)
                    .ToList();


                _logger.LogInformation("Successfully retrieved composition for elixir with ID {ElixirId}.", elixirId);
                return new Result<List<Note>>(true, notes);
            }
            catch (Exception ex)
            {
                _logger.LogError("Failed to retrieve composition for elixir with ID {ElixirId}. Error: {ErrorMessage}", elixirId, ex.Message);
                return new Result<List<Note>>(false);
            }
        }


        public async Task<Result<List<Elixir>>> ModerateElixirs()
        {
            _logger.LogInformation("Retrieving elixirs for moderation.");


            try
            {
                // Отримуємо всі еліксири, які потребують модерації
                var elixirsToModerate = await _elixirRepository.GetAsync(e =>
                    string.IsNullOrWhiteSpace(e.Name) || // Відсутність назви
                    e.Description == null || // Відсутність опису
                    e.ElixirComposition.Count < 3); // Менше трьох нот у складі


                if (!elixirsToModerate.Any())
                {
                    _logger.LogInformation("No elixirs require moderation.");
                    return new Result<List<Elixir>>(true, new List<Elixir>());
                }


                _logger.LogInformation("Successfully retrieved {Count} elixirs for moderation.", elixirsToModerate.Count);
                return new Result<List<Elixir>>(true, elixirsToModerate.ToList());
            }
            catch (Exception ex)
            {
                _logger.LogError("Failed to retrieve elixirs for moderation. Error: {ErrorMessage}", ex.Message);
                return new Result<List<Elixir>>(false);
            }
        }


        public async Task<Result> DeleteElixirByAdmin(int elixirId)
        {
            _logger.LogInformation("Admin is attempting to delete elixir with ID {ElixirId}.", elixirId);


            try
            {
                var elixir = await _elixirRepository.GetByIdAsync(elixirId);


                if (elixir == null)
                {
                    _logger.LogWarning("Elixir with ID {ElixirId} not found.", elixirId);
                    return new Result(false);
                }


                await _elixirRepository.DeleteAsync(elixir);
                await _unitOfWork.Save();


                _logger.LogInformation("Elixir with ID {ElixirId} successfully deleted by admin.", elixirId);
                return new Result(true);
            }
            catch (Exception ex)
            {
                _logger.LogError("Failed to delete elixir with ID {ElixirId}. Error: {ErrorMessage}", elixirId, ex.Message);
                return new Result(false);
            }
        }


        private List<(int noteId, string noteCategory, decimal proportion)> SelectNotesForElixir(Preferences preferences, List<Note> availableNotes)
        {
            // Отримуємо вподобання
            var likedNotes = preferences.LikedNotes?.Split(", ").ToList() ?? new List<string>();
            var dislikedNotes = preferences.DislikedNotes?.Split(", ").ToList() ?? new List<string>();


            // Фільтруємо доступні ноти
            availableNotes = availableNotes
                .Where(note => !dislikedNotes.Contains(note.Name)) // Видаляємо disliked
                .OrderBy(note => likedNotes.Contains(note.Name) ? 0 : 1) // Пріоритет liked
                .ToList();


            // Пропорції залежно від Intensity
            var proportions = GetProportionsBasedOnIntensity(preferences.Intensity);


            // Списки для категорій
            var topNotes = new List<Note>();
            var middleNotes = new List<Note>();
            var baseNotes = new List<Note>();


            // Розподіл нот між категоріями
            for (int i = 0; i < availableNotes.Count; i++)
            {
                var note = availableNotes[i];


                if (topNotes.Count < 2) topNotes.Add(note);
                else if (middleNotes.Count < 2) middleNotes.Add(note);
                else if (baseNotes.Count < 2) baseNotes.Add(note);
            }


            // Формування композицій
            var compositions = new List<(int noteId, string noteCategory, decimal proportion)>();
            AddCompositionsForCategory(topNotes, "Top", proportions["Top"], compositions);
            AddCompositionsForCategory(middleNotes, "Middle", proportions["Middle"], compositions);
            AddCompositionsForCategory(baseNotes, "Base", proportions["Base"], compositions);


            return compositions;
        }


        // Визначення пропорцій залежно від Intensity
        private Dictionary<string, decimal> GetProportionsBasedOnIntensity(string intensity)
        {
            return intensity switch
            {
                "Легкий" => new Dictionary<string, decimal>
        {
            { "Top", 0.5m },
            { "Middle", 0.3m },
            { "Base", 0.2m }
        },
                "Середній" => new Dictionary<string, decimal>
        {
            { "Top", 0.4m },
            { "Middle", 0.3m },
            { "Base", 0.3m }
        },
                "Інтенсивний" => new Dictionary<string, decimal>
        {
            { "Top", 0.3m },
            { "Middle", 0.3m },
            { "Base", 0.4m }
        },
                _ => new Dictionary<string, decimal>
        {
            { "Top", 0.4m },
            { "Middle", 0.3m },
            { "Base", 0.3m }
        }
            };
        }


        // Додавання композицій у категорії
        private void AddCompositionsForCategory(List<Note> notes, string category, decimal categoryProportion, List<(int, string, decimal)> compositions)
        {
            if (notes.Count == 0) return;


            var proportionPerNote = categoryProportion / notes.Count;


            foreach (var note in notes)
            {
                compositions.Add((note.Id, category, proportionPerNote));
            }
        }


}
}